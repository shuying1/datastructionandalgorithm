package com.iflytek.hsp.lanqiao;

import java.util.*;

public class Main {
    private static String[] nn = {
            "01010101001011001001010110010110100100001000101010",
            "00001000100000101010010000100000001001100110100101",
            "01111011010010001000001101001011100011000000010000",
            "01000000001010100011010000101000001010101011001011",
            "00011111000000101000010010100010100000101100000000",
            "11001000110101000010101100011010011010101011110111",
            "00011011010101001001001010000001000101001110000000",
            "10100000101000100110101010111110011000010000111010",
            "00111000001010100001100010000001000101001100001001",
            "11000110100001110010001001010101010101010001101000",
            "00010000100100000101001010101110100010101010000101",
            "11100100101001001000010000010101010100100100010100",
            "00000010000000101011001111010001100000101010100011",
            "10101010011100001000011000010110011110110100001000",
            "10101010100001101010100101000010100000111011101001",
            "10000000101100010000101100101101001011100000000100",
            "10101001000000010100100001000100000100011110101001",
            "00101001010101101001010100011010101101110000110101",
            "11001010000100001100000010100101000001000111000010",
            "00001000110000110101101000000100101001001000011101",
            "10100101000101000000001110110010110101101010100001",
            "00101000010000110101010000100010001001000100010101",
            "10100001000110010001000010101001010101011111010010",
            "00000100101000000110010100101001000001000000000010",
            "11010000001001110111001001000011101001011011101000",
            "00000110100010001000100000001000011101000000110011",
            "10101000101000100010001111100010101001010000001000",
            "10000010100101001010110000000100101010001011101000",
            "00111100001000010000000110111000000001000000001011",
            "10000001100111010111010001000110111010101101111000"};
    private static char[][] tu = new char[30][50];//存的是字符的ASCII值
    private static int[][] dis = new int[30][50];
    private static int[][] step = {{1, 0}, {0, -1}, {0, 1}, {-1, 0}};
    private static char[] direction = {'D', 'L', 'R', 'U'};
    //    保存经过的每一个点位置信息，采用(x)*m+y的公式表示(x,y);x,y从0开始，位置也是从来开始。m:大于最长边的随便一个数
//    起点:0;终点:29*50+49
    private static Queue<Integer> location = new LinkedList<Integer>();

    //    广度优先遍历求每一个位置到终点的距离，并存放在dis中
//    广度优先遍历寻找所有从终点到起点的路线
    public static void bfs() {//x,y当前位置;
        int x, y;//当前位置坐标
        //不为空，继续循环
        while (!location.isEmpty()) {
            int l = location.poll();//获取当前位置的坐标,与peek()类似
            x = l / 50;//获取当前位置
            y = l % 50;//获取当前位置y
            for (int i = 0; i < 4; i++) {//探索四个方向
                int xx = x + step[i][0];
                int yy = y + step[i][1];
                if (xx >= 0 && xx < 30 && yy >= 0 && yy < 50 && tu[xx][yy] == '0' && dis[xx][yy] == 0) {
                    dis[xx][yy] = dis[x][y] + 1;//当前位置的距离+1等于本次探索位置的距离
                    location.add(xx * 50 + yy);
                    if (xx == 0 && yy == 0) {
                        break;
                    }
                }
            }

        }
    }

    //    深度优先遍历，从起点到终点
    public static String dfs() {
        dis[29][49] = 0;
//        起点
        int x = 0;
        int y = 0;
        String route = "";
        while (x != 29 || y != 49) {
            for (int i = 0; i < 4; i++) {
                int xx = x + step[i][0];
                int yy = y + step[i][1];
                if (xx >= 0 && xx < 30 && yy >= 0 && yy < 50 && tu[xx][yy] == '0') {
                    if (dis[x][y] == dis[xx][yy] + 1) {
                        x = xx;
                        y = yy;
                        route += direction[i];
                        break;
                    }
                }
            }
        }
        return route;
    }

    public static void main(String[] args) {
        long num = 0;
        for (int i = 0; i < 30; i++) {
            tu[i] = nn[i].toCharArray();
        }
        location.add(29 * 50 + 49);//按数组下标来的
        System.out.println(location);
        bfs();
        String route = dfs();
        System.out.println(route);
    }
}